package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"database/sql"
	"fmt"
	"teams/db"
	"teams/graph/helpers"
	"teams/graph/model"

	"go.uber.org/zap"
)

// CreateTeamMember is the resolver for the createTeamMember field.
func (r *mutationResolver) CreateTeamMember(ctx context.Context, input model.NewTeamMember) (*model.TeamMember, error) {
	// Auth-service:
	token, err := helpers.Authenticate(r.Logger)
	if err != nil {
		r.Logger.Error("failed to authenticate", zap.Error(err))
		return nil, err
	}
	r.Logger.Info("Successful auth", zap.Any("token", token))

	var teamMember model.TeamMember
	err = db.DBClient.QueryRow("INSERT INTO team_members (name, role, city) VALUES ($1, $2, $3) RETURNING id, name, role, city",
		input.Name,
		input.Role,
		input.City,
	).Scan(&teamMember.ID, &teamMember.Name, &teamMember.Role, &teamMember.City)

	if err != nil {
		r.Logger.Error("Error creating team member", zap.Error(err))
		return nil, err
	}

	r.Logger.Info("Created a new team member", zap.Any("teamMember", teamMember))

	return &teamMember, nil
}

// UpdateTeamMember is the resolver for the updateTeamMember field.
func (r *mutationResolver) UpdateTeamMember(ctx context.Context, input model.UpdateTeamMember) (*model.TeamMember, error) {
	var teamMember model.TeamMember
	err := db.DBClient.QueryRowx("UPDATE team_members SET name=$2, role=$3, city=$4 WHERE id=$1 RETURNING id, name, role, city",
		input.ID,
		input.Name,
		input.Role,
		input.City,
	).StructScan(&teamMember)

	if err != nil {
		r.Logger.Error("Error updating team member", zap.Error(err))
		return nil, err
	}

	r.Logger.Info("Updated team member", zap.Any("teamMember", teamMember))

	return &teamMember, nil
}

// RemoveTeamMember is the resolver for the removeTeamMember field.
func (r *mutationResolver) RemoveTeamMember(ctx context.Context, input model.DeleteTeamMember) (*model.TeamMember, error) {
	// Auth-service:
	token, err := helpers.Authenticate(r.Logger)
	if err != nil {
		r.Logger.Error("failed to authenticate", zap.Error(err))
		return nil, err
	}
	r.Logger.Info("Successful auth", zap.Any("token", token))

	var teamMember model.TeamMember
	err = db.DBClient.QueryRow("DELETE FROM team_members WHERE id=$1 RETURNING id, name, role, city", input.TeamMemberID).Scan(&teamMember.ID, &teamMember.Name, &teamMember.Role, &teamMember.City)
	if err != nil {
		r.Logger.Error("Error deleting team member", zap.Error(err))
		return nil, err
	}

	r.Logger.Info("Deleted team member", zap.Any("teamMember", teamMember))

	return &teamMember, nil
}


// TeamMembers is the resolver for the teamMembers field.
func (r *queryResolver) TeamMembers(ctx context.Context) ([]*model.TeamMember, error) {
	teamMembers := make([]*model.TeamMember, 0)
	rows, err := db.DBClient.Query("SELECT id, name, role, city FROM team_members")
	if err != nil {
		r.Logger.Error("Failed to get team members", zap.Error(err))
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var teamMember model.TeamMember
		if err := rows.Scan(&teamMember.ID, &teamMember.Name, &teamMember.Role, &teamMember.City); err != nil {
			r.Logger.Error("Failed to scan row", zap.Error(err))
			return nil, err
		}
		teamMembers = append(teamMembers, &teamMember)
	}
	if err := rows.Err(); err != nil {
		r.Logger.Error("Failed to get row error", zap.Error(err))
		return nil, err
	}

	r.Logger.Info("generated list of team members")
	return teamMembers, nil
}

// TeamMember is the resolver for the teamMember field.
func (r *queryResolver) TeamMember(ctx context.Context, id string) (*model.TeamMember, error) {
	var teamMember model.TeamMember

	err := db.DBClient.QueryRow("SELECT id, name, role, city FROM team_members WHERE id = $1", id).Scan(&teamMember.ID, &teamMember.Name, &teamMember.Role, &teamMember.City)

	if err != nil {
		if err == sql.ErrNoRows {
			r.Logger.Error("Team member not found", zap.Error(err))
			return nil, fmt.Errorf("team member not found")
		}
		r.Logger.Error("Failed to get team member", zap.Error(err))
		return nil, err
	}

	r.Logger.Info("found team member with the given id")
	return &teamMember, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
